#!/bin/bash

EDIT=vi
#
# //This script use grep & less command to find out 
# This script use grep & cat -n command to find out 
# the matched strings you want to search. 
# you can choose the number of matched lines and open with $EDIT.
# if you wanna `less` command displaying with color
# then you have to grep twice, because that color text
# will `tee` to the temp file (findout).
# I can not think out a better way to  solve it until now.
# Next step I will support the multi-files open.
# //which command is `vim FILE -c ":tabnew FILE2" -c "..."`
# which command is `vim -p FILE FILE1 FILE2 ...
# if the second argument is a shell wildcard. Please 
# add backslash before the wildcard.
# when you want to use wildcard, it should be add \ before the 
# wildcard.
# There is a solution to use wildcard
# is that use the special variable "$@" to grep.
#

function die
{
  echo "[1;39mWHY? SB, isn't it Good"
  rm -r findout
  exit 1
}
trap 'die' INT

if [ $# -eq 3 ]; then
  case "$1" in 
    "-c")
      color=1
      ;;
    *)
      color=0
      ;;
  esac
elif [ $# -eq 2 ]; then
  color=1
else
  echo "[1;32mSB! parameter incorrect"
  exit 1
fi

# Here is the colorful version.
if [ $color -eq 1 ]; then
  grep --color=always "$1" $2 -nr | tee findout | cat -n
else
# Here is the non-color version
  #grep --color=auto "$1" $2 -nr | tee findout | less -N
  #grep --color=auto "$2" $3 -nr | tee findout | cat -n
  grep --color=auto "$2" $3 -nr | tee findout | less -N
fi

read -p "[1;36m which one should be selected: [m" sel 
if [ "$sel" == "q" -o "$sel" == "Q" ]; then
  echo "[1;38mQuit"
  rm -r findout
  exit 1
fi
#trap the output which all of them are not number
dig=`echo $sel | grep -E -o "[0-9]+"`
if [ -z $dig ]; then
  echo "[1;33mSB! Can you serious?"
  exit 1
fi
total=$(sed -n '$=' findout)
if [ $total -eq 0 ]; then
  echo "[1;31mSB! Can not find the goal string"
  exit 1
fi
if [ -e "findout" ] && [ -n "$dig" ] && [ $total -ge $dig ]; then 
  if [ $color -eq 1 ]; then
    #sed -n "${dig}p" findout
    filename=`sed -n "${dig}p" findout | cut -d '' -f 3 | sed 's/\[K//g'`
    line=`sed -n "${dig}p" findout | cut -d '' -f 11 | sed 's/\[K//g'`
    echo FILENAME: $filename LINE: $line
  else
    # if `less` has no colors
    filename=`sed -n "${dig}p" findout | cut -d : -f 1` 
    line=`sed -n "${dig}p" findout | cut -d : -f 2` 
  fi
  $EDIT $filename +$line -c "/$1"
  rm findout
else
  echo "[1;30mSB! I don't know either"
  exit 1
fi 
